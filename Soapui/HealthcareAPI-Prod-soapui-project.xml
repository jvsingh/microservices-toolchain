<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="f18b0c68-047e-4b54-b523-3462299a1149" activeEnvironment="Default" name="HealthcareAPI-Prod" resourceRoot="" soapui-version="5.1.3" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="121bfe61-ffe2-4989-b3fe-ba92d434151f" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://ewwc3.singhpora.com:8243" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://ewwc3.singhpora.com:8243</con:endpoint></con:endpoints><con:resource name="Healthcare" path="/healthcare/{category}" id="b0a06f89-e995-4b14-9035-fa4ca06841da"><con:settings/><con:parameters><con:parameter><con:name>category</con:name><con:value>ent</con:value><con:style>TEMPLATE</con:style><con:default>ent</con:default></con:parameter></con:parameters><con:method name="Healthcare" id="945318e6-6fe0-43f8-afdc-377d8f034363" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/octet-stream</con:mediaType><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:sur="http://ewwc3.singhpora.com/healthcare/surgery">sur:Fault</con:element></con:representation><con:request name="Request 1" id="eeb47101-4cb9-43ca-9037-2306936286a1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Bearer a13bced9-f6a8-3953-9ead-2c0de7d5798c"/>
  &lt;con:entry key="Accept" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://ewwc3.singhpora.com:8243</con:endpoint><con:request/><con:originalUri>http://ewwc3.singhpora.com/healthcare/surgery</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="category" value="surgery" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>category</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:restMockService id="ce4cd151-9234-41bc-a90c-d048d08bbfbb" port="19090" path="/" host="jv-singhpora" name="HealthcareAPI-MockService" docroot=""><con:settings/><con:properties/><con:restMockAction name="/healthcare/surgery" method="GET" resourcePath="/healthcare/surgery" id="8d8d6c7d-e0a0-4ac8-afce-e92307280412"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="aee4419a-0099-4528-b803-58a41319d3a6" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
      {
      "name": "mock1",
      "hospital": "this is a mock response from soapui",
      "category": "surgery",
      "availability": "9.00 a.m - 11.00 a.m",
      "fee": 7000
   },
      {
      "name": "mock name2",
      "hospital": "this is a mock response",
      "category": "surgery",
      "availability": "8.00 a.m - 10.00 a.m",
      "fee": 12000
   },
      {
      "name": "mock 3",
      "hospital": "this is a mock response",
      "category": "surgery",
      "availability": "3.00 p.m - 5.00 p.m",
      "fee": 8000
   }
]</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>